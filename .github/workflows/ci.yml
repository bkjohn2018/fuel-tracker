name: ci
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: UTF-8 sanity for build-critical files
        run: |
          python - <<'PY'
import pathlib, sys
targets = [
    "pyproject.toml","setup.cfg","MANIFEST.in",
    "README.md","README.rst","requirements.txt",
    "requirements-dev.txt","MODEL_CARD.md","CHANGELOG.md"
]
errs=[]
for t in targets:
    p=pathlib.Path(t)
    if p.exists():
        try:
            p.read_text(encoding="utf-8")
        except Exception as e:
            errs.append(f"{t}: {e}")
if errs:
    print("\n".join(errs)); sys.exit(1)
PY

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          # Install package in editable mode for imports to work
          pip install -e .

      - name: Show Ruff env (version & config)
        run: |
          ruff --version
          ruff config

      - name: Lint and Auto-Fix
        run: |
          # First run with autofix to resolve most issues
          ruff check . --fix
          # Then check if any issues remain
          ruff check .

      - name: Commit Auto-Fixed Files
        if: always()
        run: |
          # Configure git for the commit
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "style: auto-fix ruff issues (imports, formatting, unused vars)"
            git push
          else
            echo "No files were auto-fixed"
          fi

      - name: Unit tests (no secrets)
        run: pytest -q

  pipeline:
    # Only run the data pull/forecast on pushes to main (not PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint-and-test]
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install -e .

      - name: Secret presence check
        run: |
          if [ -z "${EIA_API_KEY}" ]; then
            echo "EIA_API_KEY is NOT available; CI will use sample fallback."
          else
            echo "EIA_API_KEY detected (masked)."
          fi
        env:
          EIA_API_KEY: ${{ secrets.EIA_API_KEY }}
      # Secret is scoped ONLY to the steps that need it
      - name: Pull data + build panel
        env:
          EIA_API_KEY: ${{ secrets.EIA_API_KEY }}
          FT_MODE: ci
        run: make pull
        continue-on-error: true

      - name: Backtest baseline
        env:
          FT_MODE: ci
        run: make backtest
        continue-on-error: true

      - name: Forecast 12m
        env:
          FT_MODE: ci
        run: make forecast
        continue-on-error: true

      - name: Summarize CI status
        if: always()
        run: |
          mkdir -p outputs
          echo "----- FIRE CI SUMMARY -----" > outputs/CI_SUMMARY.txt
          date -u +"asof: %Y-%m-%dT%H:%M:%SZ" >> outputs/CI_SUMMARY.txt
          echo "" >> outputs/CI_SUMMARY.txt
          if [ -f outputs/status.json ]; then
            echo "status.json:" >> outputs/CI_SUMMARY.txt
            cat outputs/status.json >> outputs/CI_SUMMARY.txt
            echo "" >> outputs/CI_SUMMARY.txt
          else
            echo "status: unknown (pipeline steps returned nonzero; see logs)" >> outputs/CI_SUMMARY.txt
          fi
          if [ -d logs ]; then
            echo "" >> outputs/CI_SUMMARY.txt
            echo "log files present:" >> outputs/CI_SUMMARY.txt
            find logs -type f >> outputs/CI_SUMMARY.txt
          fi

      - name: Upload logs & status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-and-lineage
          path: |
            logs/**
            outputs/**
  publish:
    if: github.event_name == 'workflow_dispatch'
    needs: [lint-and-test]
    runs-on: ubuntu-latest
    environment: production
    env:
      FT_MODE: publish
      EIA_API_KEY: ${{ secrets.EIA_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: UTF-8 sanity for build-critical files
        run: |
          python - <<'PY'
import pathlib, sys
targets = [
    "pyproject.toml","setup.cfg","MANIFEST.in",
    "README.md","README.rst","requirements.txt",
    "requirements-dev.txt","MODEL_CARD.md","CHANGELOG.md"
]
errs=[]
for t in targets:
    p=pathlib.Path(t)
    if p.exists():
        try:
            p.read_text(encoding="utf-8")
        except Exception as e:
            errs.append(f"{t}: {e}")
if errs:
    print("\n".join(errs)); sys.exit(1)
PY
      - run: pip install -r requirements.txt && pip install -e .
      - name: Pull/backtest/forecast (publish)
        run: |
          make pull
          make backtest
          make forecast
      - name: Gate on status=ok
        run: |
          python - << 'PY'
          import json, sys
          from pathlib import Path
          p = Path('outputs/status.json')
          if not p.exists():
              print('Publish blocked: outputs/status.json not found', file=sys.stderr)
              sys.exit(1)
          data = json.loads(p.read_text())
          if data.get('status') != 'ok':
              print('Publish blocked: status.json != ok', file=sys.stderr)
              print(json.dumps(data, indent=2))
              sys.exit(1)
          print('Publish gate passed: status=ok')
          PY
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: publish-artifacts
          path: outputs/**

      - name: Step summary
        if: always()
        run: |
          echo "## FIRE CI Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f outputs/status.json ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`outputs/status.json\`" >> $GITHUB_STEP_SUMMARY
            cat outputs/status.json >> $GITHUB_STEP_SUMMARY
          else
            echo "**No status.json produced.** See step logs." >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f outputs/CI_SUMMARY.txt ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`outputs/CI_SUMMARY.txt\`" >> $GITHUB_STEP_SUMMARY
            cat outputs/CI_SUMMARY.txt >> $GITHUB_STEP_SUMMARY
          fi
